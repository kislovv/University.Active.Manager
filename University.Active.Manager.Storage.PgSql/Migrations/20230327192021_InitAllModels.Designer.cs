// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using University.Active.Manager.Storage.PgSql;

#nullable disable

namespace University.Active.Manager.Storage.PgSql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230327192021_InitAllModels")]
    partial class InitAllModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventEventRole", b =>
                {
                    b.Property<long>("EventRolesId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_roles_id");

                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid")
                        .HasColumnName("events_id");

                    b.HasKey("EventRolesId", "EventsId")
                        .HasName("pk_event_event_role");

                    b.HasIndex("EventsId")
                        .HasDatabaseName("ix_event_event_role_events_id");

                    b.ToTable("event_event_role", (string)null);
                });

            modelBuilder.Entity("EventStudent", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid")
                        .HasColumnName("events_id");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid")
                        .HasColumnName("students_id");

                    b.HasKey("EventsId", "StudentsId")
                        .HasName("pk_event_student");

                    b.HasIndex("StudentsId")
                        .HasDatabaseName("ix_event_student_students_id");

                    b.ToTable("event_student", (string)null);
                });

            modelBuilder.Entity("InstituteSubject", b =>
                {
                    b.Property<long>("InsitutesId")
                        .HasColumnType("bigint")
                        .HasColumnName("insitutes_id");

                    b.Property<long>("SubjectsId")
                        .HasColumnType("bigint")
                        .HasColumnName("subjects_id");

                    b.HasKey("InsitutesId", "SubjectsId")
                        .HasName("pk_institute_subject");

                    b.HasIndex("SubjectsId")
                        .HasDatabaseName("ix_institute_subject_subjects_id");

                    b.ToTable("institute_subject", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date_time");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean")
                        .HasColumnName("is_done");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<string>("Place")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("place");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date_time");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_events_creator_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.EventRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<long>("Quota")
                        .HasColumnType("bigint")
                        .HasColumnName("quota");

                    b.Property<long>("Score")
                        .HasColumnType("bigint")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Institute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("specialty");

                    b.HasKey("Id")
                        .HasName("pk_institutes");

                    b.ToTable("institutes", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailIsConfirm")
                        .HasColumnType("boolean")
                        .HasColumnName("email_is_confirm");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<long>("InstituteId")
                        .HasColumnType("bigint")
                        .HasColumnName("institute_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("password");

                    b.Property<string>("ProfileType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("profile_type");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValue("student")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_profiles");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("ProfileType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("specialty");

                    b.HasKey("Id")
                        .HasName("pk_subjects");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Student", b =>
                {
                    b.HasBaseType("University.Active.Manager.Entity.User");

                    b.Property<byte>("Course")
                        .HasColumnType("smallint")
                        .HasColumnName("course");

                    b.Property<int>("CourseType")
                        .HasColumnType("integer")
                        .HasColumnName("course_type");

                    b.HasIndex("InstituteId")
                        .HasDatabaseName("ix_profiles_institute_id");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.UniversityAdministrator", b =>
                {
                    b.HasBaseType("University.Active.Manager.Entity.User");

                    b.Property<string>("AdministrationDepartment")
                        .HasColumnType("text")
                        .HasColumnName("administration_department");

                    b.HasIndex("InstituteId")
                        .HasDatabaseName("ix_profiles_institute_id");

                    b.HasDiscriminator().HasValue("UniversityAdministration");
                });

            modelBuilder.Entity("EventEventRole", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.EventRole", null)
                        .WithMany()
                        .HasForeignKey("EventRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_event_role_roles_event_roles_id");

                    b.HasOne("University.Active.Manager.Entity.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_event_role_events_events_id");
                });

            modelBuilder.Entity("EventStudent", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_student_events_events_id");

                    b.HasOne("University.Active.Manager.Entity.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_student_profiles_students_id");
                });

            modelBuilder.Entity("InstituteSubject", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Institute", null)
                        .WithMany()
                        .HasForeignKey("InsitutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_institute_subject_institutes_insitutes_id");

                    b.HasOne("University.Active.Manager.Entity.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_institute_subject_subjects_subjects_id");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Event", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.UniversityAdministrator", "Creator")
                        .WithMany("Events")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_profiles_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Student", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Institute", "Institute")
                        .WithMany("Students")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profiles_institutes_institute_id");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.UniversityAdministrator", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Institute", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profiles_institutes_institute_id");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Institute", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.UniversityAdministrator", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
