// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using University.Active.Manager.Storage.PgSql;

#nullable disable

namespace University.Active.Manager.Storage.PgSql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventEventRole", b =>
                {
                    b.Property<long>("EventRolesId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_roles_id");

                    b.Property<Guid>("EventsId")
                        .HasColumnType("uuid")
                        .HasColumnName("events_id");

                    b.HasKey("EventRolesId", "EventsId")
                        .HasName("pk_event_event_role");

                    b.HasIndex("EventsId")
                        .HasDatabaseName("ix_event_event_role_events_id");

                    b.ToTable("event_event_role", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.ChooseSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid")
                        .HasColumnName("participant_id");

                    b.Property<long>("Score")
                        .HasColumnType("bigint")
                        .HasColumnName("score");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("subject_id");

                    b.HasKey("Id")
                        .HasName("pk_choose_subjects");

                    b.HasIndex("ParticipantId")
                        .HasDatabaseName("ix_choose_subjects_participant_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_choose_subjects_subject_id");

                    b.ToTable("choose_subjects", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date_time");

                    b.Property<long>("InstituteId")
                        .HasColumnType("bigint")
                        .HasColumnName("institute_id");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean")
                        .HasColumnName("is_done");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<string>("Place")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("place");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date_time");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_events_creator_id");

                    b.HasIndex("InstituteId")
                        .HasDatabaseName("ix_events_institute_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.EventRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<long>("Quota")
                        .HasColumnType("bigint")
                        .HasColumnName("quota");

                    b.Property<long>("Score")
                        .HasColumnType("bigint")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Institute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("specialty");

                    b.HasKey("Id")
                        .HasName("pk_institutes");

                    b.ToTable("institutes", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Participation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<long>("EventRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_role_id");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.HasKey("UserId", "EventId", "EventRoleId")
                        .HasName("pk_participating");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_participating_event_id");

                    b.HasIndex("EventRoleId")
                        .HasDatabaseName("ix_participating_event_role_id");

                    b.ToTable("participating", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("InstituteId")
                        .HasColumnType("bigint")
                        .HasColumnName("institute_id");

                    b.Property<long>("MaxScore")
                        .HasColumnType("bigint")
                        .HasColumnName("max_score");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("specialty");

                    b.HasKey("Id")
                        .HasName("pk_subjects");

                    b.HasIndex("InstituteId")
                        .HasDatabaseName("ix_subjects_institute_id");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("University.Active.Manager.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("EmailConfirmLink")
                        .HasColumnType("text")
                        .HasColumnName("email_confirm_link");

                    b.Property<bool>("EmailIsConfirm")
                        .HasColumnType("boolean")
                        .HasColumnName("email_is_confirm");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<long>("InstituteId")
                        .HasColumnType("bigint")
                        .HasColumnName("institute_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValue("Student")
                        .HasColumnName("role");

                    b.Property<long>("TotalScore")
                        .HasColumnType("bigint")
                        .HasColumnName("total_score");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("InstituteId")
                        .HasDatabaseName("ix_users_institute_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EventEventRole", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.EventRole", null)
                        .WithMany()
                        .HasForeignKey("EventRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_event_role_roles_event_roles_id");

                    b.HasOne("University.Active.Manager.Entity.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_event_event_role_events_events_id");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.ChooseSubject", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.User", "Participant")
                        .WithMany("ChooseSubjects")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_choose_subjects_users_participant_id");

                    b.HasOne("University.Active.Manager.Entity.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_choose_subjects_subjects_subject_id");

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Event", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.User", "Creator")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_users_creator_id");

                    b.HasOne("University.Active.Manager.Entity.Institute", "Institute")
                        .WithMany("Events")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_institutes_institute_id");

                    b.Navigation("Creator");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Participation", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participating_events_event_id");

                    b.HasOne("University.Active.Manager.Entity.EventRole", "EventRole")
                        .WithMany("Participants")
                        .HasForeignKey("EventRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participating_roles_event_role_id");

                    b.HasOne("University.Active.Manager.Entity.User", "User")
                        .WithMany("ParticipantsEvent")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_participating_users_user_id");

                    b.Navigation("Event");

                    b.Navigation("EventRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Subject", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Institute", "Institute")
                        .WithMany("Subjects")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subjects_institutes_institute_id");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.User", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Institute", "Institute")
                        .WithMany("Users")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_institutes_institute_id");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.EventRole", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Institute", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Subjects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.User", b =>
                {
                    b.Navigation("ChooseSubjects");

                    b.Navigation("CreatedEvents");

                    b.Navigation("ParticipantsEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
