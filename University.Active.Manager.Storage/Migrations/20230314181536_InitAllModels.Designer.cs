// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using University.Active.Manager.Storage;

#nullable disable

namespace University.Active.Manager.Storage.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230314181536_InitAllModels")]
    partial class InitAllModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4");

            modelBuilder.Entity("EventStudent", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("TEXT");

                    b.HasKey("EventsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("EventStudent");
                });

            modelBuilder.Entity("InstituteSubject", b =>
                {
                    b.Property<long>("InsitutesId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SubjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InsitutesId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("InstituteSubject");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Place")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Quota")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Institute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Specialty")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Institutes");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Course")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<long>("InstituteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Specialty")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EventStudent", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.Active.Manager.Entity.Student", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstituteSubject", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Institute", null)
                        .WithMany()
                        .HasForeignKey("InsitutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.Active.Manager.Entity.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Student", b =>
                {
                    b.HasOne("University.Active.Manager.Entity.Institute", "Institute")
                        .WithMany("Students")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("University.Active.Manager.Entity.Institute", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
